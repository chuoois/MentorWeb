// business/ai.service.js
const { GoogleGenerativeAI } = require("@google/generative-ai");
const Mentor = require("../models/mentor.model");

class AiService {
  constructor() {
    this.client = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.client.getGenerativeModel({ model: "models/gemini-2.5-flash" });
  }

  async getMentorContext() {
  const mentors = await Mentor.find({ status: "ACTIVE" })
    .select("_id full_name job_title company category skill bio location price")
    .lean();

  // ƒê∆∞a d·ªØ li·ªáu JSON d·∫°ng ƒë∆°n gi·∫£n cho AI
  return JSON.stringify(mentors, null, 2);
}

  async chatMentorAdvisor(userMessage) {
  const contextJson = await this.getMentorContext();

  const prompt = `
  B·∫°n l√† AI t∆∞ v·∫•n ch·ªçn mentor ph√π h·ª£p cho mentee.
  D∆∞·ªõi ƒë√¢y l√† danh s√°ch mentor d∆∞·ªõi d·∫°ng JSON:

  mentors = ${contextJson}

  - M·ªói mentor c√≥ "_id", "full_name", "job_title", "skill", "bio", "price", "location".
  - D·ª±a tr√™n y√™u c·∫ßu mentee, h√£y ch·ªçn mentor ph√π h·ª£p nh·∫•t.
  - Tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON c√≥ d·∫°ng nh∆∞ sau:

  {
    "recommended": {
      "_id": "...",
      "full_name": "...",
      "reason": "...",
      "link": "/api/mentors/<_id>"
    },
    "alternatives": [
      { "_id": "...", "full_name": "...", "reason": "...", "link": "/api/mentors/<_id>" },
      ...
    ]
  }

  Y√™u c·∫ßu c·ªßa mentee: ${userMessage}
  `;

  const result = await this.model.generateContent(prompt);

  // Tr·∫£ v·ªÅ JSON ƒë√£ parse
  const text = result.response.text().trim();

  try {
    const json = JSON.parse(text);
    return json;
  } catch {
    // N·∫øu Gemini tr·∫£ text kh√¥ng chu·∫©n JSON, tr·∫£ v·ªÅ raw text
    return { raw: text };
  }
}
}

// üëá ƒê√¢y l√† ph·∫ßn QUAN TR·ªåNG
module.exports = new AiService();
